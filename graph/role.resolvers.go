package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"procurement-be/graph/generated"
	"procurement-be/graph/model"
	"procurement-be/pkg/role"
	"procurement-be/utils"
)

// Store is the resolver for the Store field.
func (r *roleMutationResolver) Store(ctx context.Context, obj *model.EmptyObject, in []*model.RoleDataInput) (*model.RoleFetchResponse, error) {
	var (
		response = new(model.RoleFetchResponse)
		args     []role.RoleData
	)

	if err := utils.CopyObject(in, &args); err != nil {
		return nil, err
	}

	result, err := r.PkgHandler.RoleHandler.Store(ctx, args)
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// Update is the resolver for the Update field.
func (r *roleMutationResolver) Update(ctx context.Context, obj *model.EmptyObject, in []*model.RoleDataInput) (*model.RoleFetchResponse, error) {
	var (
		response = new(model.RoleFetchResponse)
		args     []role.RoleData
	)

	if err := utils.CopyObject(in, &args); err != nil {
		return nil, err
	}

	result, err := r.PkgHandler.RoleHandler.Update(ctx, args)
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// Fetch is the resolver for the Fetch field.
func (r *roleQueryResolver) Fetch(ctx context.Context, obj *model.EmptyObject, in *model.FetchRequestInput) (*model.RoleFetchResponse, error) {
	response := new(model.RoleFetchResponse)
	result, err := r.PkgHandler.RoleHandler.Fetch(ctx, role.RoleData{})
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// RoleMutation returns generated.RoleMutationResolver implementation.
func (r *Resolver) RoleMutation() generated.RoleMutationResolver { return &roleMutationResolver{r} }

// RoleQuery returns generated.RoleQueryResolver implementation.
func (r *Resolver) RoleQuery() generated.RoleQueryResolver { return &roleQueryResolver{r} }

type roleMutationResolver struct{ *Resolver }
type roleQueryResolver struct{ *Resolver }
