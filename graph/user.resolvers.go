package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"log"
	db "procurement-be/database"
	"procurement-be/graph/generated"
	"procurement-be/graph/model"

	"go.mongodb.org/mongo-driver/bson"
)

// Fetch is the resolver for the Fetch field.
func (r *userQueryResolver) Fetch(ctx context.Context, obj *model.EmptyObject, in *model.FetchRequestInput) (*model.FetchResponse, error) {
	collection := db.GetCollection("users")
	cursor, err := collection.Find(context.TODO(), bson.D{})
	if err != nil {
		log.Fatal(err)
	}
	defer cursor.Close(ctx)
	var users []*model.UserLoginData
	for cursor.Next(ctx) {
		var user model.UserLoginData
		if err = cursor.Decode(&user); err != nil {
			log.Fatal(err)
		}
		users = append(users, &user)
	}
	if err := cursor.Err(); err != nil {
		return nil, err
	}

	resp := &model.FetchResponse{
		Data: &model.UserItems{
			Items: users,
		},
	}
	return resp, nil
}

// UserQuery returns generated.UserQueryResolver implementation.
func (r *Resolver) UserQuery() generated.UserQueryResolver { return &userQueryResolver{r} }

type userQueryResolver struct{ *Resolver }
