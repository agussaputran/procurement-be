package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"procurement-be/graph/generated"
	"procurement-be/graph/model"
	"procurement-be/pkg/user"
	"procurement-be/utils"
)

// Store is the resolver for the Store field.
func (r *userMutationResolver) Store(ctx context.Context, obj *model.EmptyObject, in *model.UserDataInput) (*model.LoginResponse, error) {
	response := new(model.LoginResponse)
	result, err := r.PkgHandler.UserHandler.Store(ctx, user.UserData{
		Role:     *in.Role,
		Email:    *in.Email,
		Name:     *in.Name,
		Password: *in.Password,
	})
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// Update is the resolver for the Update field.
func (r *userMutationResolver) Update(ctx context.Context, obj *model.EmptyObject, in *model.UserDataInput) (*model.LoginResponse, error) {
	response := new(model.LoginResponse)
	result, err := r.PkgHandler.UserHandler.Update(ctx, user.UserData{
		ID:       *in.ID,
		Role:     *in.Role,
		Email:    *in.Email,
		Name:     *in.Name,
		Password: *in.Password,
	})
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// Fetch is the resolver for the Fetch field.
func (r *userQueryResolver) Fetch(ctx context.Context, obj *model.EmptyObject, in *model.FetchRequestInput) (*model.FetchResponse, error) {
	response := new(model.FetchResponse)
	result, err := r.PkgHandler.UserHandler.Fetch(ctx, user.UserData{
		Role: *in.Role,
		Name: *in.Name,
	})
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// UserMutation returns generated.UserMutationResolver implementation.
func (r *Resolver) UserMutation() generated.UserMutationResolver { return &userMutationResolver{r} }

// UserQuery returns generated.UserQueryResolver implementation.
func (r *Resolver) UserQuery() generated.UserQueryResolver { return &userQueryResolver{r} }

type userMutationResolver struct{ *Resolver }
type userQueryResolver struct{ *Resolver }
