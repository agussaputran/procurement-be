package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"procurement-be/graph/generated"
	"procurement-be/graph/model"
	"procurement-be/pkg/product"
	"procurement-be/utils"
)

// Store is the resolver for the Store field.
func (r *productMutationResolver) Store(ctx context.Context, obj *model.EmptyObject, in []*model.ProductDataInput) (*model.ProductFetchResponse, error) {
	var (
		response = new(model.ProductFetchResponse)
		args     []product.ProductDataInput
	)

	if err := utils.CopyObject(in, &args); err != nil {
		return nil, err
	}

	result, err := r.PkgHandler.ProductHandler.Store(ctx, args)
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// Update is the resolver for the Update field.
func (r *productMutationResolver) Update(ctx context.Context, obj *model.EmptyObject, in []*model.ProductDataInput) (*model.ProductFetchResponse, error) {
	var (
		response = new(model.ProductFetchResponse)
		args     []product.ProductDataInput
	)

	if err := utils.CopyObject(in, &args); err != nil {
		return nil, err
	}

	result, err := r.PkgHandler.ProductHandler.Update(ctx, args)
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// Fetch is the resolver for the Fetch field.
func (r *productQueryResolver) Fetch(ctx context.Context, obj *model.EmptyObject, in *model.ProductDataInput) (*model.ProductFetchResponse, error) {
	response := new(model.ProductFetchResponse)
	result, err := r.PkgHandler.ProductHandler.Fetch(ctx, product.ProductDataInput{
		Name:       *in.Name,
		VendorID:   *in.VendorID,
		CategoryID: *in.CategoryID,
	})
	if err != nil {
		return nil, err
	}

	if err = utils.CopyObject(result, &response); err != nil {
		return nil, err
	}
	return response, nil
}

// ProductMutation returns generated.ProductMutationResolver implementation.
func (r *Resolver) ProductMutation() generated.ProductMutationResolver {
	return &productMutationResolver{r}
}

// ProductQuery returns generated.ProductQueryResolver implementation.
func (r *Resolver) ProductQuery() generated.ProductQueryResolver { return &productQueryResolver{r} }

type productMutationResolver struct{ *Resolver }
type productQueryResolver struct{ *Resolver }
